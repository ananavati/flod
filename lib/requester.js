// Generated by CoffeeScript 1.3.3
(function() {
  var Requester, Statistics, async, http, request, url, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = require("underscore");

  async = require("async");

  http = require("http");

  request = require("request");

  url = require("url");

  Statistics = require("./statistics");

  Requester = (function(_super) {

    __extends(Requester, _super);

    function Requester(options) {
      this.options = _.extend({}, this._options, this.docopt2obj(options));
      http.Agent.defaultMaxSockets = this.options.concurrents;
      http.globalAgent.maxSockets = this.options.concurrents;
      this.latency = new Array(this.options.requests);
      this.requestCounter = 0;
      this.responseCounter = 0;
    }

    Requester.prototype._options = {
      requests: 1000,
      concurrents: 50,
      ssl: false,
      debug: false
    };

    Requester.prototype.docopt2obj = function(opts) {
      var obj;
      return obj = {
        requests: opts["-n"],
        concurrents: opts["-c"],
        host: opts["--host"],
        admin: opts["--admin"],
        server: opts["--server"],
        test: opts["--test"],
        verbose: opts["--verbose"]
      };
    };

    Requester.prototype.bench = function(index, concurrents, max, callback) {
      return callback(null);
    };

    Requester.prototype.initBench = function(callback) {
      var opts, self;
      self = this;
      url = [this.options.admin, "bench", "start"].join("/");
      url += "?n=" + this.options.requests + "&c=" + this.options.concurrents;
      opts = {
        method: "GET",
        uri: url
      };
      if (this.options.debug) {
        console.log(opts);
      }
      return request(opts, function(err, response, body) {
        var data;
        if (err) {
          throw err;
        }
        try {
          data = JSON.parse(body);
        } catch (e) {
          throw e;
        }
        if (self.options.debug) {
          console.log("data", data);
        }
        return callback(err, data.id, data);
      });
    };

    Requester.prototype.finishBench = function(id, callback) {
      var opts;
      url = [this.options.admin, "bench", "finish"].join("/");
      url += "?id=" + id;
      opts = {
        method: "GET",
        uri: url
      };
      return request(opts, function(err, response, body) {
        var data;
        if (err) {
          throw err;
        }
        try {
          data = JSON.parse(body);
        } catch (e) {
          throw e;
        }
        return callback(err, data);
      });
    };

    Requester.prototype.start = function() {
      var self;
      self = this;
      if (this.options.debug) {
        console.log("start()");
      }
      return this.initBench(function(err, id) {
        var _this = this;
        if (err) {
          throw err;
        }
        console.log("initBench with id = " + id);
        return self.bench(0, self.concurrents, self.requests, function(err) {
          if (err) {
            throw err;
          }
          return self.finishBench(id, function(err, response) {
            if (err) {
              throw err;
            }
            console.log("finished bench");
            return console.log(response);
          });
        });
      });
    };

    return Requester;

  })(Statistics);

  module.exports = Requester;

}).call(this);
